import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import * as ioClient from 'socket.io-client';
import { TaskPayload } from '@common/interface/robot/task.interface';
import { MovePayload } from '@common/interface/robot/move.interface';
import { StatusPayload } from '@common/interface/robot/status.interface';
import { OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { NetworkService } from 'src/modules/apis/network/network.service';
import { MotionPayload } from '@common/interface/robot/motion.interface';
import { SubscribeDto } from '@sockets/dto/subscribe.dto';
import { FormType } from '@common/enum/equipment.enum';
import { LogService } from 'src/modules/apis/log/log.service';
import { AlarmDto } from '@sockets/dto/alarm.dto';
import { SequenceDto } from '@sockets/dto/sequence.dto';
export declare class SocketGateway implements OnGatewayConnection, OnGatewayDisconnect, OnModuleDestroy, OnGatewayInit, OnModuleInit {
    private readonly networkService;
    private readonly logService;
    constructor(networkService: NetworkService, logService: LogService);
    afterInit(): void;
    server: Server;
    socket: Socket;
    tcpServer: any;
    tcpClient: any;
    slamnav: Socket;
    streaming: Socket;
    taskman: Socket;
    acs: Socket;
    manipulator: Socket;
    torso: Socket;
    taskState: TaskPayload;
    moveState: MovePayload;
    motionState: MotionPayload;
    robotState: StatusPayload;
    frsSocket: ioClient.Socket;
    lidarCloud: any[];
    debugMode: boolean;
    lastStatus: any;
    lastMoveStatus: any;
    lastLidarCloud: any;
    lastMappingCloud: any;
    lastLocalPath: any;
    lastGlobalPath: any;
    lastFRSVobs: any;
    lastFRSVobsRobot: any;
    lastFRSVobsClosure: any;
    lastFRSPath: any;
    lastGoal: string;
    intervalTime: number;
    TCP_Open(): void;
    setDebugMode(onoff: boolean): void;
    connectFrsSocket(url: string): Promise<void>;
    interval_frs: NodeJS.Timeout;
    onModuleInit(): void;
    onModuleDestroy(): void;
    private connectChecker;
    setConnectChecker(): void;
    onApplicationShutdown(signal?: string): any;
    handleConnection(client: Socket): void;
    handleDisconnect(client: Socket): void;
    handelSubscribe(dto: SubscribeDto, client: Socket): Promise<"already in room" | "success">;
    handelUnsubscribe(dto: SubscribeDto, client: Socket): Promise<"success" | "not in room">;
    handleTaskStartMessage(payload: TaskPayload): Promise<void>;
    handleTaskDoneMessage(payload: TaskPayload): Promise<void>;
    handleTaskLoadMessage(payload: TaskPayload): Promise<void>;
    handleTaskErrorMessage(payload: TaskPayload): Promise<void>;
    handleTaskIdMessage(payload: number): Promise<void>;
    handleMoveCommandMessage(payload: string): Promise<void>;
    handleMoveCommandMessage2(payload: string): Promise<void>;
    handleStatusMessage(payload: string, client: Socket): Promise<void>;
    handleWorkingStatusMessage(payload: string, client: Socket): Promise<void>;
    handleMoveReponseMessage(payload: string, client: Socket): Promise<void>;
    setSequence(data: SequenceDto, scope: string): Promise<void>;
    setAlarmCode(alarmCode: number): Promise<void>;
    clearAlarmCode(alarmCode: number): Promise<void>;
    setAlarm(data: AlarmDto): Promise<void>;
    setAlarmLog(code: number | string): Promise<void>;
    clearAlarmLog(code: number | string): Promise<void>;
    startAlarmLog(code: number | string): Promise<void>;
    handleLoadReponseMessage(payload: string, client: Socket): Promise<void>;
    handleMappingReponseMessage(payload: string, client: Socket): Promise<void>;
    handleLocalizationReponseMessage(payload: string): Promise<void>;
    handleRandomseqReponseMessage(payload: string): Promise<void>;
    handleDockReponseMessage(payload: string): Promise<void>;
    handleLidarCloudMessage(payload: any[]): Promise<void>;
    handleMappingCloudMessage(payload: any[]): Promise<void>;
    handlePathResponse(payload: {
        time: string;
    }): Promise<void>;
    handleLocalPathdMessage(payload: any[]): Promise<void>;
    handleGlobalPathdMessage(payload: any[]): Promise<void>;
    handleTaskInitMessage(payload: {
        file: string;
        id: number;
        running: boolean;
    }): Promise<void>;
    handleTaskVariablesMessage(payload: any[]): Promise<void>;
    handleTaskDockMessage(): Promise<void>;
    handleTaskUnDockMessage(): Promise<void>;
    handleMotionMessage(payload: string): Promise<void>;
    handleMotionResponseMessage(payload: string): Promise<void>;
    handleACSAutoRunStartMessage(): Promise<void>;
    handleACSAutoRunEndMessage(): Promise<void>;
    handleWebInitMessage(): Promise<void>;
    handleAlarmLogMessage(payload: AlarmDto): Promise<void>;
    handleEquipmentLogMessage(payload: {
        form: FormType;
        data: any;
    }): Promise<void>;
    getConnection(): {
        SLAMNAV: boolean;
        TASK: boolean;
    };
}
